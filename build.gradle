plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.ptjcoding'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Database
    runtimeOnly 'com.mysql:mysql-connector-j:'
    runtimeOnly 'com.h2database:h2:2.2.224'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Springdoc - Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'


    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Fixture Monkey
    testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-starter:1.0.13'
    testImplementation("com.navercorp.fixturemonkey:fixture-monkey-jakarta-validation:1.0.0")

}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('testAndReportWithJacoco') {
    group = 'verification'

    dependsOn test
    finalizedBy jacocoTestReport
}


jacoco {
    jacocoTestReport {
        reports {
            html.setRequired true
            xml.setRequired false
            csv.setRequired false

            // 리포트의 저장 경로를 설정합니다.
            html.destination file("jacoco/jacoco.html")
        }
    }

    jacocoTestCoverageVerification {
        // 커버리지의 범위와 퍼센테이지를 설정합니다.
        violationRules {
            rule {
                element = 'CLASS'

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.90
                }
            }
        }
    }
}
